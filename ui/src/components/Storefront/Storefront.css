/**
 * Storefront Component Styles
 *
 * Semantic styling for product presentation layouts.
 * Uses Light DOM pattern - all styles can be themed globally.
 *
 * Architecture:
 * - @layer organization for clear cascade control
 * - Uses CSS Grid for responsive 50/50 split layout
 * - Respects .l-gap-* utilities from layouts.css for gap spacing
 * - Modern CSS features (:has, :is, :where) for low specificity
 * - Data attributes for state-based styling
 * - Custom properties for component-level theming
 * - Imports Media.css for reusable media utilities
 *
 * Layout Pattern:
 * - Mobile (<768px): Single column stack
 * - Desktop (â‰¥768px): 2-column 50/50 split
 * - Gap controlled by .l-gap-* utility classes applied via JavaScript
 */

/* Import Media component utilities for video/image handling */
@import "../Media/Media.css";

/* Import Radio Button Group styles for flavor selection */
@import "../Radio/RadioButtonGroup.css";

/* ========================================
   Component Layer Organization
   ======================================== */

/**
 * Base Layer: Structural styles and defaults
 * Lowest priority - easily overridden
 */
@layer storefront.base {
  /**
   * Parent component: uses Utopia grid system for responsive layouts
   *
   * Note: This creates a simplified 2-column grid for the storefront pattern.
   * The gap is controlled by .l-gap-* utilities applied via JavaScript.
   * For more complex layouts, use the full Utopia grid with .col-span-* utilities.
   */
  .storefront {
    display: grid;
    grid-template-columns: 1fr; /* Mobile: single column (stack) */
  }

  /* Responsive 50/50 split at tablet breakpoint */
  @media (min-width: 768px) {
    .storefront {
      grid-template-columns: repeat(2, 1fr); /* Desktop: 2 equal columns */
    }
  }

  /* Child components: semantic containers with display context */
  .storefront-assets,
  .storefront-form {
    display: flex;
    flex-direction: column;
    border-radius: 8px;
    min-height: 400px;
    min-width: 0; /* Prevent grid blowout with images/long content */
  }

  /* Responsive height adjustments */
  @media (min-width: 768px) {
    .storefront-assets,
    .storefront-form {
      min-height: 500px;
    }
  }

  /* ========================================
     Storefront Asset Frame Component
     ======================================== */

  /**
   * Asset frame: 1:1 aspect ratio media container
   * Provides controlled aspect ratio and object-fit for child media
   * Supports both <img> and <video> elements
   */
  .storefront-asset-frame {
    display: block;
    position: relative;
    overflow: hidden;
    aspect-ratio: 1 / 1; /* Default 1:1 (square) */
    border-radius: 8px;
  }
}

/**
 * Component Layer: Variant-specific styles
 * Mid priority - defines visual identity
 */
@layer storefront.components {
  /* ========================================
     Storefront Assets Variants
     ======================================== */

  .storefront-assets--primary {
    background: var(--color-primary);
    color: var(--color-on-primary);
  }

  .storefront-assets--secondary {
    background: var(--color-secondary);
    color: var(--color-on-secondary);
  }

  .storefront-assets--tertiary {
    background: var(--color-tertiary);
    color: var(--color-on-tertiary);
  }

  .storefront-assets--surface {
    background: var(--color-surface);
    color: var(--color-on-surface);
  }

  /* ========================================
     Storefront Form Variants
     ======================================== */

  .storefront-form--surface {
    background: var(--color-surface);
    color: var(--color-on-surface);
  }

  .storefront-form--surface-variant {
    background: var(--color-surface-variant);
    color: var(--color-on-surface-variant);
  }

  .storefront-form--primary {
    background: var(--color-primary);
    color: var(--color-on-primary);
  }

  .storefront-form--secondary {
    background: var(--color-secondary);
    color: var(--color-on-secondary);
  }
}

/**
 * State Layer: Data-attribute based state styling
 * Uses modern :has() and data attributes for flexibility
 */
@layer storefront.state {
  /* ========================================
     Alignment States (via data-align)
     ======================================== */

  .storefront-assets[data-align="start"],
  .storefront-form[data-align="start"] {
    justify-content: flex-start;
  }

  .storefront-assets[data-align="center"],
  .storefront-form[data-align="center"] {
    justify-content: center;
  }

  .storefront-assets[data-align="end"],
  .storefront-form[data-align="end"] {
    justify-content: flex-end;
  }

  .storefront-assets[data-align="stretch"],
  .storefront-form[data-align="stretch"] {
    justify-content: stretch;
  }

  /* ========================================
     Aspect Ratio States (via data-aspect)
     ======================================== */

  .storefront-assets[data-aspect="1-1"] {
    aspect-ratio: 1 / 1;
    min-height: unset;
  }

  .storefront-assets[data-aspect="16-9"] {
    aspect-ratio: 16 / 9;
    min-height: unset;
  }

  .storefront-assets[data-aspect="4-3"] {
    aspect-ratio: 4 / 3;
    min-height: unset;
  }

  .storefront-assets[data-aspect="3-2"] {
    aspect-ratio: 3 / 2;
    min-height: unset;
  }

  /* ========================================
     Padding States (via data-padding)
     ======================================== */

  .storefront-form[data-padding="s"] {
    padding: var(--space-s);
  }

  .storefront-form[data-padding="m"] {
    padding: var(--space-m);
  }

  .storefront-form[data-padding="l"] {
    padding: var(--space-l);
  }

  .storefront-form[data-padding="xl"] {
    padding: var(--space-xl);
  }

  /* Default padding for assets (if not using aspect ratio) */
  .storefront-assets:not([data-aspect="1-1"]):not([data-aspect="16-9"]):not([data-aspect="4-3"]):not([data-aspect="3-2"]) {
    padding: var(--space-l);
  }

  /* ========================================
     Asset Frame: Aspect Ratio States
     ======================================== */

  .storefront-asset-frame[data-aspect="1-1"] {
    aspect-ratio: 1 / 1;
  }

  .storefront-asset-frame[data-aspect="16-9"] {
    aspect-ratio: 16 / 9;
  }

  .storefront-asset-frame[data-aspect="4-3"] {
    aspect-ratio: 4 / 3;
  }

  .storefront-asset-frame[data-aspect="3-2"] {
    aspect-ratio: 3 / 2;
  }

  .storefront-asset-frame[data-aspect="none"] {
    aspect-ratio: unset;
  }

  /* ========================================
     Asset Frame: Object Fit States
     ======================================== */

  .storefront-asset-frame[data-fit="cover"] img,
  .storefront-asset-frame[data-fit="cover"] video {
    object-fit: cover;
  }

  .storefront-asset-frame[data-fit="contain"] img,
  .storefront-asset-frame[data-fit="contain"] video {
    object-fit: contain;
  }

  .storefront-asset-frame[data-fit="fill"] img,
  .storefront-asset-frame[data-fit="fill"] video {
    object-fit: fill;
  }

  .storefront-asset-frame[data-fit="none"] img,
  .storefront-asset-frame[data-fit="none"] video {
    object-fit: none;
  }

  /* ========================================
     Asset Frame: Overflow Protection
     ======================================== */

  /**
   * Enforce overflow: hidden on all asset frames
   * Prevents improperly sized assets from breaking layout
   * Higher specificity to prevent overrides from imported styles
   */
  .storefront-asset-frame,
  .storefront-asset-frame[data-aspect] {
    overflow: hidden;
  }
}

/**
 * Utilities Layer: Helper styles for common patterns
 * Highest priority - can override component styles
 */
@layer storefront.utilities {
  /* Center content within containers */
  .storefront-assets > *,
  .storefront-form > * {
    max-width: 100%;
  }

  /* Image handling within assets */
  .storefront-assets img {
    width: 100%;
    height: auto;
    display: block;
  }

  /* ========================================
     Asset Frame: Child Media Handling
     ======================================== */

  /**
   * Child media (img, video) fills container
   * Uses width/height 100% + object-fit for controlled sizing
   * Default object-fit: cover ensures media fills frame without distortion
   */
  .storefront-asset-frame img,
  .storefront-asset-frame video {
    width: 100%;
    height: 100%;
    display: block;
    object-fit: cover; /* Default: fill container while maintaining aspect ratio */
  }

  /* Modern :has() selector - style parent based on child content */
  @supports selector(:has(*)) {
    /* If assets contain only an image, remove padding for full-bleed */
    .storefront-assets:has(> img:only-child) {
      padding: 0;
    }

    /* If form contains buttons, ensure proper spacing */
    .storefront-form:has(button) {
      gap: var(--space-m);
    }

    /**
     * Asset Frame: Vertical Stacking
     * When multiple asset frames exist inside storefront-assets,
     * stack them vertically with gap spacing
     */
    .storefront-assets:has(storefront-asset-frame) {
      display: flex;
      flex-direction: column;
      gap: var(--space-m);
    }
  }
}
