/**
 * Responsive Layout Tokens
 *
 * Reusable layout patterns for responsive media-text combinations,
 * grid splits, and common layout utilities. Built on the 12-column
 * Utopia grid system with mobile-first responsive breakpoints.
 *
 * These tokens abstract common responsive patterns to reduce duplication
 * across components like MediaLockup, Section, and future layouts.
 */

/* === RESPONSIVE BREAKPOINTS === */
/* These match common device sizes and grid system breakpoints */
/* Mobile: < 768px (default, mobile-first) */
/* Tablet: >= 768px */
/* Desktop: >= 1024px */

/* ===  REMOVED: DO NOT OVERRIDE UTOPIA GRID === */
/*
 * IMPORTANT: This file previously duplicated the Utopia grid system
 * by creating .l-container, .l-grid, and .l-split-* classes.
 *
 * These have been REMOVED to prevent overriding the base Utopia grid.
 *
 * Instead, use:
 * - .u-container (from grid.css) - for container max-width and padding
 * - .u-grid (from grid.css) - for display:grid and gap
 * - .col-span-* (from Grid.css) - for column spanning
 * - Inline grid-template-columns styles for custom layouts
 *
 * Example responsive 50/50 split:
 * <div class="u-container">
 *   <div class="u-grid" style="grid-template-columns: 1fr;">
 *     <div class="col-span-12">Mobile: Full width</div>
 *     <div class="col-span-12">Mobile: Full width</div>
 *   </div>
 * </div>
 *
 * On desktop, use media query utility classes or inline styles:
 * <div class="u-grid" style="grid-template-columns: repeat(12, 1fr);">
 *   <div class="col-span-6">Desktop: Half width</div>
 *   <div class="col-span-6">Desktop: Half width</div>
 * </div>
 */

/* === STACKED LAYOUTS === */
/* Single column vertical stack - creates grid with 1 column */
.l-stack {
  display: grid;
  grid-template-columns: 1fr;
  gap: var(--grid-gutter);
}

.l-stack > * {
  grid-column: 1;
}

/* Stacked with specified gap */
.l-stack--gap-none {
  gap: 0;
}

.l-stack--gap-xs {
  gap: var(--space-xs);
}

.l-stack--gap-s {
  gap: var(--space-s);
}

.l-stack--gap-m {
  gap: var(--space-m);
}

.l-stack--gap-l {
  gap: var(--space-l);
}

.l-stack--gap-xl {
  gap: var(--space-xl);
}

/* === OVERLAY LAYOUTS === */
/* Layered content where items overlap in the same grid cell */
.l-overlay {
  display: grid;
  grid-template-columns: 1fr;
  position: relative;
}

.l-overlay > * {
  grid-column: 1;
  grid-row: 1;
}

/* Ensure proper stacking */
.l-overlay > *:first-child {
  z-index: 0;
}

.l-overlay > *:last-child {
  z-index: 1;
}

/* === OFFSET/OVERLAP LAYOUTS === */
/*
 * REMOVED: .l-offset was creating its own 12-column grid, overriding Utopia
 *
 * For offset/overlap layouts, use .u-grid with grid-template-columns
 * and position children manually:
 *
 * <div class="u-container">
 *   <div class="u-grid" style="grid-template-columns: repeat(12, 1fr); position: relative;">
 *     <div class="col-span-8">Image</div>
 *     <div class="col-span-7" style="grid-column: 6 / span 7; grid-row: 1;">Overlapping content</div>
 *   </div>
 * </div>
 */

/* === RESPONSIVE ORDERING === */
/* Swap order on desktop - uses CSS Grid order property */
@media (min-width: 768px) {
  .l-reverse-desktop > *:first-child {
    order: 2;
  }
  .l-reverse-desktop > *:last-child {
    order: 1;
  }
}

/* === CONTENT WIDTH CONSTRAINTS === */
/* Constrain content width within layout */
.l-content--narrow {
  max-width: 45ch;
}

.l-content--readable {
  max-width: 65ch;
}

.l-content--wide {
  max-width: 80ch;
}

/* Center constrained content */
.l-content--center {
  margin-inline: auto;
}

/* === ALIGNMENT UTILITIES === */
.l-align-start {
  align-items: flex-start;
}

.l-align-center {
  align-items: center;
}

.l-align-end {
  align-items: flex-end;
}

.l-justify-start {
  justify-content: flex-start;
}

.l-justify-center {
  justify-content: center;
}

.l-justify-end {
  justify-content: flex-end;
}

/* === ASPECT RATIO UTILITIES === */
/* Common aspect ratios for media */
.l-aspect-1-1 {
  aspect-ratio: 1 / 1;
}

.l-aspect-16-9 {
  aspect-ratio: 16 / 9;
}

.l-aspect-21-9 {
  aspect-ratio: 21 / 9;
}

.l-aspect-4-3 {
  aspect-ratio: 4 / 3;
}

.l-aspect-3-4 {
  aspect-ratio: 3 / 4;
}

.l-aspect-3-2 {
  aspect-ratio: 3 / 2;
}

.l-aspect-2-3 {
  aspect-ratio: 2 / 3;
}

/* === RESPONSIVE VISIBILITY === */
/* Show/hide at breakpoints */
.l-hide-mobile {
  display: none;
}

@media (min-width: 768px) {
  .l-hide-mobile {
    display: block;
  }
}

.l-hide-desktop {
  display: block;
}

@media (min-width: 768px) {
  .l-hide-desktop {
    display: none;
  }
}

/* === RESPONSIVE TEXT ALIGNMENT === */
.l-text-center-mobile {
  text-align: center;
}

@media (min-width: 768px) {
  .l-text-center-mobile {
    text-align: left;
  }
}

.l-text-center-desktop {
  text-align: left;
}

@media (min-width: 768px) {
  .l-text-center-desktop {
    text-align: center;
  }
}

/* === FULL BLEED UTILITIES === */
/* Break out of container constraints */
.l-full-bleed {
  max-width: 100%;
  width: 100vw;
  margin-left: calc(50% - 50vw);
  margin-right: calc(50% - 50vw);
}

/* === CARD LAYOUT === */
/* Self-contained card with constrained width */
.l-card {
  max-width: 400px;
  border-radius: var(--space-xs);
  overflow: hidden;
  box-sizing: border-box;
}

.l-card--sm {
  max-width: 320px;
}

.l-card--md {
  max-width: 400px;
}

.l-card--lg {
  max-width: 520px;
}

/* Center card */
.l-card--center {
  margin-inline: auto;
}

/* === GAP UTILITIES === */
/* Quick gap spacing for flex/grid containers */
.l-gap-3xs { gap: var(--space-3xs); }
.l-gap-2xs { gap: var(--space-2xs); }
.l-gap-xs { gap: var(--space-xs); }
.l-gap-s { gap: var(--space-s); }
.l-gap-m { gap: var(--space-m); }
.l-gap-l { gap: var(--space-l); }
.l-gap-xl { gap: var(--space-xl); }
.l-gap-2xl { gap: var(--space-2xl); }
.l-gap-3xl { gap: var(--space-3xl); }

/* Fluid gap utilities (responsive spacing) */
.l-gap-s-m { gap: var(--space-s-m); }
.l-gap-m-l { gap: var(--space-m-l); }
.l-gap-l-xl { gap: var(--space-l-xl); }

/* === PADDING UTILITIES === */
/* Quick padding for prototyping and common patterns */
.l-pad-3xs { padding: var(--space-3xs); }
.l-pad-2xs { padding: var(--space-2xs); }
.l-pad-xs { padding: var(--space-xs); }
.l-pad-s { padding: var(--space-s); }
.l-pad-m { padding: var(--space-m); }
.l-pad-l { padding: var(--space-l); }
.l-pad-xl { padding: var(--space-xl); }
.l-pad-2xl { padding: var(--space-2xl); }
.l-pad-3xl { padding: var(--space-3xl); }

/* Directional padding */
.l-pad-block-3xs { padding-block: var(--space-3xs); }
.l-pad-block-2xs { padding-block: var(--space-2xs); }
.l-pad-block-xs { padding-block: var(--space-xs); }
.l-pad-block-s { padding-block: var(--space-s); }
.l-pad-block-m { padding-block: var(--space-m); }
.l-pad-block-l { padding-block: var(--space-l); }
.l-pad-block-xl { padding-block: var(--space-xl); }

.l-pad-inline-3xs { padding-inline: var(--space-3xs); }
.l-pad-inline-2xs { padding-inline: var(--space-2xs); }
.l-pad-inline-xs { padding-inline: var(--space-xs); }
.l-pad-inline-s { padding-inline: var(--space-s); }
.l-pad-inline-m { padding-inline: var(--space-m); }
.l-pad-inline-l { padding-inline: var(--space-l); }
.l-pad-inline-xl { padding-inline: var(--space-xl); }

/* Fluid padding utilities (responsive spacing) */
.l-pad-s-m { padding: var(--space-s-m); }
.l-pad-m-l { padding: var(--space-m-l); }
.l-pad-l-xl { padding: var(--space-l-xl); }

/* === MARGIN UTILITIES === */
/* Common margin patterns */
.l-mar-block-3xs { margin-block: var(--space-3xs); }
.l-mar-block-2xs { margin-block: var(--space-2xs); }
.l-mar-block-xs { margin-block: var(--space-xs); }
.l-mar-block-s { margin-block: var(--space-s); }
.l-mar-block-m { margin-block: var(--space-m); }
.l-mar-block-l { margin-block: var(--space-l); }
.l-mar-block-xl { margin-block: var(--space-xl); }

.l-mar-inline-auto { margin-inline: auto; } /* Center horizontally */
